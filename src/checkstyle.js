const {installLatestCheckstyle} = require("./download-checkstyle");

const _ = require('lodash')
const fs = require('fs-plus')
const exec = require('child_process').exec;
const path = require('path');
const normalize = require('normalize-path');
const color = require('ansi-colors');

const ROOT = process.argv[2] || process.cwd();
const configPath = `../checkstyle/checkstyle-new.xml`;
if (!fs.isDirectorySync(ROOT)) {
    console.log(`${ROOT} cannot be founded`)
    process.exit(1);
}

function readChangeTxt(file) {
    if (fs.isFileSync(file)) {
        const lines = fs.readFileSync(file, 'utf8').split(/\r?\n/);
        return lines;
    }
    return [];
}

const configFile = path.join(__dirname, configPath);

function wrap(_path) {
    if (_path.includes(' ')) {
        return normalize(`"${_path}"`);
    }
    return normalize(_path);
}

function printBlue(text) {
    console.log(color.blue(text));
}

function printRed(text) {
    console.log(color.red(text));
}

function cutXmlFile(file) {
    const lines = fs.readFileSync(file, 'utf-8').split(/\r?\n/g);
    return lines.slice(_.findIndex(lines, t => t.trimLeft().startsWith('<file name=')),
     _.findLastIndex(lines, t => t.trimLeft().startsWith('</file>')) + 1
     );
}

function checkJavaFile(file, jarFile) {
    return new Promise((resolve, reject) => {
        console.log("Checking file", file);
        const outputFile = path.join(ROOT, 'output.xml');
        if (fs.isFileSync(outputFile)) {
            fs.unlinkSync(outputFile);
        }

        exec('java -cp ' + wrap(jarFile) +
            ` -Dconfig_loc=${wrap(path.dirname(configFile))} com.puppycrawl.tools.checkstyle.Main -f xml -o ${wrap(outputFile)}` + ' -c ' + wrap(configFile) + ' ' + wrap(file),
            (err, stdout, stderr) => {
                if (stderr && stderr.length) {
                    printRed(stderr);
                }

                if (fs.isFileSync(outputFile)) {
                    return resolve(cutXmlFile(outputFile));
                } else {
                    return reject('Cannot find the output.xml result generated by checksyle.');
                }

            });
    });
}

async function checkChangesForFile() {
    const checkstyleJar = await installLatestCheckstyle(ROOT);
    if (!fs.isFileSync(checkstyleJar)) {
        throw new Error(`Cannot download checkstyle.`);
    }
    const lines = readChangeTxt(path.join(ROOT, 'changes.txt'));
    const files = [];
    for (const l of lines) {
        const file = path.join(ROOT, l);
        if (fs.isFileSync(file) && path.extname(file) === '.java') {
            files.push(normalize(file));
        }
    }
    console.log('Start checkstyle...')
    const resultFile = path.join(ROOT, 'checkstyle-result.xml');
    fs.writeFileSync(resultFile, `<?xml version="1.0" encoding="UTF-8"?>\n<checkstyle version="8.34">\n`);
    for (const file of _.uniq(files)) {
        const lines = await checkJavaFile(file, checkstyleJar);
        for (const line of lines) {
            fs.appendFileSync(resultFile, line+ '\n');
        }
    }
    fs.appendFileSync(resultFile, `</checkstyle>
    `);
    console.log('Done checkstyle...')
}

checkChangesForFile().catch(console.log);
